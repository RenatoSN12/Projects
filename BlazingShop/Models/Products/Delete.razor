@page "/products/delete/{id:int}"
@using Microsoft.EntityFrameworkCore
@inject AppDbContext Context
@inject NavigationManager NavigationManager

<h1>Delete @_model?.Title</h1>

<EditForm Model="_model" OnValidSubmit="@HandleSubmitAsync">
    
    <DataAnnotationsValidator/>
    <ValidationSummary/>
    
    <div class="mb-3">
        <label for="Title" class="form-label">Title</label>
        <InputText class="form-control" readonly="true" id="Title" @bind-Value="_model.Title"/>
    </div>

    <div class="mb-3">
        <label for="Price" class="form-label">Price</label>
        <InputNumber class="form-control" readonly="true" type="number" id="Price" @bind-Value="_model.Price"/>
    </div>

    @if (!string.IsNullOrEmpty(_errorMessage))
    {
        <div class="alert alert-danger" role="alert">
            @_errorMessage
        </div>
    }
    
    <button type="submit" class="btn btn-danger">Delete</button>
     
</EditForm>

@code {

    [Parameter] public int Id { get; set; }

    string? _errorMessage = null;
    Product? _model = new();

    protected override async Task OnInitializedAsync()
    {
        _model = await Context
            .Products
            .AsNoTracking()
            .FirstOrDefaultAsync(x => x.Id == Id);
    }

    async Task HandleSubmitAsync()
    {
        try
        {
            var prod = await Context
                .Products
                .FirstOrDefaultAsync(x => x.Id == Id);

            if (prod is null)
                throw new Exception("Product not found");

            Context.Products.Remove(prod);
            await Context.SaveChangesAsync();

            NavigationManager.NavigateTo("/products");
        }
        catch (Exception e)
        {
            _errorMessage = e.Message;
        }

    }
}
