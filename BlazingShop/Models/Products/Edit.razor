@page "/products/edit/{id:int}"
@using Microsoft.EntityFrameworkCore

@inject AppDbContext Context
@inject NavigationManager NavigationManager

<h1>Edit Product</h1>

<EditForm Model="_model" OnValidSubmit="@HandleSubmitAsync">
    
    <DataAnnotationsValidator/>
    <ValidationSummary/>
    
    <div class="mb-3">
        <label for="Title" class="form-label">Title</label>
        <InputText class="form-control" type="text" id="Title" @bind-Value="_model.Title"/>
    </div>

    <div class="mb-3">
        <label for="Price" class="form-label">Price</label>
        <InputNumber class="form-control" type="number" id="Price" @bind-Value="_model.Price"/>
    </div>
    
    <div class="mb-3">
        <label for="CategoryId" class="form-label">Category</label>
        <InputSelect id="categoryId" @bind-value="_model.CategoryId" class="form-control">
            @foreach (var category in _categories)
            {
                <option value="@category.Id">@category.Title</option>
            }
        </InputSelect>
    </div>
    
    @if (!string.IsNullOrEmpty(_errorMessage))
    {
        <div class="alert alert-danger" role="alert">
            @_errorMessage
        </div>
    }
    
    <button class="btn btn-success" type="submit">Save</button>
     
</EditForm>

@code {

    [Parameter]
    public int Id { get; set; }
    
     Product? _model = new();
     string? _errorMessage = null;
     List<Category> _categories = new();

     protected override async Task OnInitializedAsync()
     {
         _model = await Context
             .Products
             .AsNoTracking()
             .FirstOrDefaultAsync(x => x.CategoryId == Id);
         
         _categories = await Context.
             Categories.
             AsNoTracking().
             ToListAsync();
         if (_categories.Any())
         {
             _model.CategoryId = _categories[0].Id;
         }
     }

     async Task HandleSubmitAsync()
     {
         try
         {
             var prod = await Context.Products.FirstOrDefaultAsync(x => x.Id == Id);
             if (prod is null)
                 throw new Exception("Product not found");

             prod.Title = _model.Title;
             prod.Price = _model.Price;
             prod.CategoryId = _model.CategoryId;

             Context.Products.Update(prod);
             await Context.SaveChangesAsync();
             
             NavigationManager.NavigateTo("/products");
         }
         catch (Exception e)
         {
             _errorMessage = e.Message;
         }
         
     }
}